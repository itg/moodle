#!/usr/bin/python

# imports
from constants import *
import sys
import mysql.connector
import time
import subprocess
import os

# function definitions

def get_semesters_to_sync(smart_conn):
    semesters = []

    sql = "SELECT name, DATEDIFF(start,CURDATE()) AS 'start_days' FROM smart.terms WHERE (name LIKE '%FA' OR name LIKE '%WI' OR name LIKE '%SP') ORDER BY start DESC"
    s_cur = smart_conn.cursor();

    s_cur.execute(sql)

    for (name, start_days) in s_cur:
        semesters.append({'name':name, 'start_days':start_days})

    s_cur.close()

    if (3 > len(semesters)):
        # Skip processing - just return whatever we have
        return semesters

    for i in xrange(1,len(semesters)):
        if (0 >= semesters[i]['start_days']):
            semesters = [semesters[i]['name'], semesters[i-1]['name']]
            break;

    return semesters

def get_category_ids_for_semesters(moodle_conn, semesters):
    if (1 > len(semesters)):
        # Nothing to do
        return 0

    sql = "SELECT id FROM mdl_course_categories WHERE name LIKE %s";
    for i in xrange(1,len(semesters)):
        sql += " OR name LIKE %s "

    m_cur = moodle_conn.cursor();
    
    query_params = tuple(semesters)     # execute expects a tuple with the values to bind
    m_cur.execute(sql, query_params)

    ids = []
    row = m_cur.fetchone()
    while row is not None:
        ids.append(row[0])
        row = m_cur.fetchone()

    return ids



# script execution
print '%s - script start' % time.strftime("%c")
try:
    # Connect to Moodle
    m_config = {
            'host'      : db_constants.MOODLE_DB_SERVER,
            'password'  : db_constants.MOODLE_DB_PASSWORD,
            'user'      : db_constants.MOODLE_DB_USERNAME,
            'database'  : db_constants.MOODLE_DB_NAME
            }
    moodle_conn = mysql.connector.connect(**m_config);
    # Connect to smart
    s_config = {
            'host'      : db_constants.SMART_DB_SERVER,
            'password'  : db_constants.SMART_DB_PASSWORD,
            'user'      : db_constants.SMART_DB_USERNAME,
            'database'  : db_constants.SMART_DB_NAME
            }
    smart_conn = mysql.connector.connect(**s_config);

except mysql.connector.Error as err:
    # Cleanup, print error message, and die
    print(err)
    moodle_conn.close()
    smart_conn.close()
    sys.exit(10) 
    
semesters = get_semesters_to_sync(smart_conn)
ids = get_category_ids_for_semesters(moodle_conn, semesters)

id_param = '-c=' + ','.join(str(x) for x in ids)

# Get absolute path to enrollment script
path_to_script = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/enrol/database/cli/partial_sync.php'

# Call external script to sync Moodle enrollments
proc = subprocess.Popen(['/usr/bin/php', path_to_script, '-i', id_param], stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1)

# Print output at it is generated by the sync script
for line in iter(proc.stdout.readline, b''):
    print(line),

# Print error messages, close proc.stdout, and wait for the subprocess to exit
print proc.communicate()[1] 

print '%s - script finished' % time.strftime("%c")
